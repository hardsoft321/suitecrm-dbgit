Синхронизация данных БД с файлами

Метаописания таблиц кладутся в папку custom/Extension/modules/DbGit/Ext/DbDefs/.
В них описываются поля таблиц, нужные для логики приложения, исключая автоматически генерируемые, даты создания/модификации и т.п.
Также указываются поля ключа (уникального индекса), по которым будет проводиться сравнение. Записи должны быть уникальны по этому индексу.

После этого доступны команды

./dbgit [<options>] db2file

./dbgit [<options>] file2db

./dbgit [<options>] status

При синхронизации db в файлы для каждой записи в указанных таблицах создается файл на диске.
Имя файла генерируется на основе ключа (sha1 . serialize).

Опции:
  -y - Ответить Да на все вопросы.
  -n - Ответить Нет на все вопросы.
  -v - Больше вывода в консоль.
  --tables=<masks> - Сделать синхронизацию только указанных таблиц. Таблицы указываются через запятую. Возможно указывать маску. Пример: `acl_*,kreports`.
  --login=<user_name> - Указать пользователя для входа, чтобы создавать записи в базе через бин от его имени, по умолчанию - системный пользователь. Бойтесь функционала SecurityGroups, который автоматически добавляет группы пользователя новым записям.
  --export - Только вывести данные для синхронизации в php-виде.
  --ignore-duplicates - При нахождении дубликата в базе сохранять первую попавшуюся запись и не выдавать ошибку.


Создание пакета для вставки данных

Допустим нужно создать пакет, который вставит записи в таблицы dbapplists и dbappliststrings.
1) Синхронизируем текущее состояние базы в файлы; указываем нужные таблицы
php dbgit db2file --tables=dbapplists,dbappliststrings
В корне SugarCRM появится папка dbdata с записанными файлами.
2) Через интерфейс вносим нужные изменения в справочник (добавляем, изменяем или удаляем записи в dbapplists/dbappliststrings).
Интерфейс обычно проводит некоторую валидацию данных, поэтому это рекомендуемый способ внесения изменений.
3) Генерируем файл с изменениями
php dbgit db2file --tables=dbapplists,dbappliststrings --export > data.php
4) Переносим файл data.php в пакет в папку scripts.
В post_install.php записываем подключение data.php и его запуск
<?php
function post_install()
{
    require_once 'modules/DbGit/DbGit.php';
    $plan = require __DIR__.'/data.php';
    DbGit::executeFileToDbPlan($plan);
}
Сгенерированную папку dbdata можно удалить или оставить где-нибудь для резервной копии.

Если команда add (0 => 'add') запускается для записи, которая уже есть (сравнение по ключу из DbDefs), то запись не будет добавлена или обновлена.
Поэтому в новой версии этого же пакета нет смысла изменять записи с командой add в файле data.php.
Нужно создать еще один файл с данными, например, data1.php и вписать его запуск в post_install.
